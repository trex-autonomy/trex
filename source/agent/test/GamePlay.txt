#include "Plasma.nddl"#include "PlannerConfig.nddl"enum Mode {			External, 	// Synchronize observations.			Internal, 	// Publish updates at the current tick			Goal, 		// Input goals from a client			Command,	// Output goals to a server			Ignore		// Don't care.}class AgentTimeline extends Timeline {	Mode mode;	AgentTimeline(Mode _mode){		mode = _mode;	}}enum Values {Rock, Paper, Scissors};class PlayerState extends AgentTimeline {	predicate Hides{}	predicate Shows{Values value;}	PlayerState(Mode _mode){		super(_mode);	}}PlayerState::Hides{	meets(Shows);	met_by(Shows);}PlayerState::Shows{	meets(Hides);	met_by(Hides);}class Player extends AgentTimeline {	PlayerState hand;	predicate Wait{}	predicate One{duration = 1;}	predicate Two{duration = 1;}	predicate Three{duration = 1;}	predicate Draw{duration = 1;}	Player(Mode _playerMode, Mode _stateMode){		super(_playerMode);		hand = new PlayerState(_stateMode);	}}class Umpire extends AgentTimeline {	Player player1;	Player player2;	predicate PlayGame{}	predicate Wait{}	Umpire(Player _player1, Player _player2, Mode _mode){		super(_mode);		player1 = _player1;		player2 = _player2;	}}Player::Wait{	met_by(Draw);	meets(One);	contained_by(object.hand.Hides);}Player::One{	met_by(Wait);	meets(Two);	contained_by(object.hand.Hides);}Player::Two{	met_by(One);	meets(Three);	contained_by(object.hand.Hides);}Player::Three{	met_by(Two);	meets(Draw);	contained_by(object.hand.Hides);}Player::Draw{	met_by(Three);	meets(Wait);	contained_by(object.hand.Shows);}Umpire::PlayGame{	met_by(Wait);	meets(Wait);	ends(object.player1.Draw);	ends(object.player2.Draw);}Umpire::Wait{	met_by(PlayGame);	meets(PlayGame);	equals(object.player1.Wait);	equals(object.player2.Wait);}
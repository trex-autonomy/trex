<!--
 The goal of this test is to ensure we can recall dispatched goals when a plan failure is detected.
 The timelines are a, b, and c. Each is an instance of a number timeline. The numbers timeline is a single predicate 
 repeated with no gaps. 

 The predicate holds a value in [0 4]. 

 To generate a plan failure we use 3 reactors, A, B and C: 
 * Reactor A owns a, and observes B and C. Its solver binds values in descending order. 
 * Reactor B owns b. It's solver is set up to ignore variable binding decisions.
 * Reactor C is a plug-in adapter. It binds values for C based on the current tick.
 * In all cases, a lookAhead of 11 is used so that we dispatch in the future and will thus require a recall.

 Reactor A will plan for B and C, thus generating requests for values. No conflicts should arise between reactor A
 and B since B retains flexibility. However, A will plan goals for a and c. In the latter case it will conflict with
 the value set by C. This will break the plan and force a recall.

 Reactor A is constrained to find a value for C at tick 1 that should match expected value. However, at tick 2 we should
 see a departure of values for C. Synchrnization at tick 2 will:
 1. Generate a failure in reactor A.
 2. This will trigger a recall of requests to B and C.
 3. Recalls to C will be ignored, as were requests. It is a dumb plug-in.
 4. Recalls to B will invalidate its plan and leave it in an undefined state also. It will remain that way going forward.

 When we start tick 3, A will have an outstanding goal for A due to occur at tick 3. This will be handled in synchronization.

 Finally, A.c will continue to be laid out as rules define, since the duration is 1. Thus the synchronizer in A will handle the layout
 and we would expect that it would now be consistent with values of A since no grounding of the values variable will occur in synchronization.
-->
<Agent name="Recall" finalTick="4">
 <TeleoReactor name="A" component="DeliberativeReactor" 
	lookAhead="11" latency="1" solverConfig="Recall.A.solver.cfg"/>

 <TeleoReactor name="B" component="DeliberativeReactor" 
	lookAhead="11" latency="1" solverConfig="Recall.B.solver.cfg"/>

 <TeleoReactor name="C" component="RecallAdapter" lookAhead="11" latency="0" config="RecallAdapter.cfg"/>

</Agent>

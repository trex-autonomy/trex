/wg/stor5/jbohren/ros/ros-pkg-branch-trex/trex_pr2/logs/2009.236.5/pr2.doorman/plans1251134926586--begin /wg/stor5/jbohren/ros/ros-pkg-branch-trex/trex/TREX/agent/base/TREX.nddl

// Declare enumeration for Token States
enum TokenStates {INACTIVE, ACTIVE, MERGED, REJECTED}


// Declare built in constraints used for common TREX use cases
constraint default(var, value) { var <: value }
constraint defaultOnCommit(var, value) { var <: value }
constraint assertCompleted(s) { s <: TokenStates }
constraint assertRejected(s) { s <: TokenStates }


// Declare a marker class to indicate the base class should be a Timeline
// which enforces a total order. This should only arise where we
// have predicates!
class Timeline {}

/**
 * The TICK DURATION in seconds. It will be set when the deliberative reactor is loaded
 */
float TICK_DURATION;

/**
 * This MISSION_END will be set when a deliberative reactor is loaded. It is mapped to the agent horizon
 */
int MISSION_END;

/**
 * The AGENT_CLOCK will capture clock tick events for propagation purposes
 */
int AGENT_CLOCK;

enum Mode {
  External, 	// Synchronize observations and dispatch plans as goals
  Internal, 	// Publish updates at the current tick
  Ignore	// Not synchronized at all (can be deprecated?)
}

class AgentTimeline extends Timeline {
  Mode mode; // Indicate if an internal or external timeline
  string defaultPredicate; // Sets the default predicate value for filling out an emty timeline and resettting
  bool persistent; // Indicate if the current value can be discarded on a reset to recover

  /**
   * A predicate to reflect that the timeline is undefined. Used to fill gaps
   * where they occur.
   */
  predicate undefined{};

  /**
   * A predicate which is used to block any successor states for a timeline
   */
  predicate Terminated{concurrent(end, MISSION_END);}

  AgentTimeline(Mode _mode){
    mode = _mode;
    defaultPredicate = "undefined";
    persistent = true;
  }

  AgentTimeline(Mode _mode, string _defaultPredicate){
    mode = _mode;
    defaultPredicate = _defaultPredicate;
    persistent = true;
  }

  AgentTimeline(Mode _mode, string _defaultPredicate, bool _persistent){
    mode = _mode;
    defaultPredicate = _defaultPredicate;
    persistent = _persistent;
  }
};

/**
 * Base class for actions. These will never be exchanged across reactors and are generated to
 * accomplisg goals. This is a construct of a deliberative reactor
 */
class AgentActions {
  /**
   * This action supports a common idiom to indicate we want something to happen proactively.
   */
  predicate startEvent{ eq(duration, 1); }

  AgentActions(){}
};

class StateVariable extends AgentTimeline{
 	predicate Holds{ eq(duration, 1); }
 	StateVariable(Mode _mode){super(_mode);}
	StateVariable(Mode _mode, string _defaultPredicate){super(_mode, _defaultPredicate);}
};

enum ResultStatus {
  UNDEFINED,  // Used when the behavior becomes inactive in an undefined state, such as when rebooting
  SUCCESS,    // Indicates the behavior terminated, accomplsihing its goals. Or so it believes!
  ABORTED,    // Means the behavior aborted pursuit of its goal of its own volition
  PREEMPTED   // Means the behavior terminated on command from a client.
};

/**
 * Encapsulate Behaviors that have a state of active or inactive
 */
class Behavior extends AgentTimeline {

  predicate Inactive{
    ResultStatus status;
  }

  predicate Active{
    int dispatch_time; // The time at which the goal was dispatched
    int max_duration; // If duration exceeds this, the token should be preempted.
    precedes(dispatch_time, start); // This is a <= constraint, but we use explicit temporal construct instead.
    temporalDistance(start, [1, +inf], MISSION_END); // Behaviors must start before the mission ends
    trex_behavior(object); // Maintains connection between this token and its parent, if also a behavior. Use this to propagate max duration bounds.
  }

  Behavior(Mode _mode){
    super(_mode, "Inactive", false);
  }
};

Behavior::Active{
  meets(Inactive _reserved_s);
  // This is generic where behaviors are contained
  max_duration <= end - start;
}

Behavior::Inactive{
  defaultOnCommit(status, UNDEFINED);
}
--begin /wg/stor5/jbohren/ros/ros-pkg-branch-trex/trex_pr2/nddl/common/move_behavior.nddl
#include "TREX.nddl"
#include "world_model/topological_map.nddl"

/**
 * The MoveBehavior is an abstract class that handles navigation towards a goal. A mode paramter
 * will be used to indicate the type of concrete class to use.
 */
class MoveBehavior extends Behavior {
  predicate Inactive{
    string frame_id;
    float time_stamp;
    float x;
    float y;
    float z;
    float qx;
    float qy;
    float qz;
    float qw;
  }

  // Parameters to get to the target
  predicate Active {
    string frame_id;
    float time_stamp;
    float x;
    float y;
    float z;
    float qx;
    float qy;
    float qz;
    float qw;
    MAP_KEY start_connector;
  }

  MoveBehavior(Mode _mode){
    super(_mode);
  }
};

/**
 * If the move is successful, bind parameters based on the active pose pursued.
 */
MoveBehavior::Inactive{
  if(status == SUCCESS){
    met_by(Active p);
    eq_pose_msg(object, p.object);
  }
}

--begin /wg/stor5/jbohren/ros/ros-pkg-branch-trex/trex_pr2/nddl/common/nav.nddl
// Tier 1 interface points - external api
#include "rcs/nav/exports.nddl"
#include "common/move_behavior.nddl"

// Tier 2 interface points - other domains
#include "state_estimator/exports.nddl"

// Mechanisms used for driving and tucking arms
HeadMechanism head_mechanism = new HeadMechanism(External);

// Controller and laser configuration requirements
MoveBase::Active{
  contained_by(head_mechanism.use_head_controller);
  contained_by(laser_tilt_mechanism.use_laser_tilt_controller);
}

/**
 * Must be in a valid configuration for navigation
 */
NavigationBehavior::Active{
  contained_by(arms_tucked.True);
  contained_by(tilt_laser_ready.True);
}
--begin /wg/stor5/jbohren/ros/ros-pkg-branch-trex/trex_pr2/nddl/doors/door_controller.nddl
/*
 * Door Domain Controller
 * Copyright (c) 2008, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the <ORGANIZATION> nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * @author Conor McGann
 */

/**
 * This file specifies the model for a high level door domain controller. It uses a state machine
 * to capture the high-level states in getting through a doorway, and defines rules governing
 * what happens in each state and how states transition. The paradigm blends explicit programmer specification of
 * a state machine with the power of model-based generative planning which will resolve the requirements to achieve
 * the stipulated next step in control. In general, we want to offload general domain constraints/requirements 
 * from the specific control specification required to capture the strategies particular to getting thru the doorway
 */

// Timelines and class declarations required
#include "doors/imports.nddl"

/**
 * These constants are the set of all individual action timeout limits for actions
 * used in the door domain. All values are in seconds
 */
float CHECK_PATH_DURATION_BOUND = 300.0;
float DETECT_DOOR_DURATION_BOUND = 300.0;
float DETECT_HANDLE_DURATION_BOUND = 600.0;
float GRASP_HANDLE_DURATION_BOUND = 300.0;
float UNLATCH_HANDLE_DURATION_BOUND = 300.0;
float MOVE_BASE_LOCAL_APPROACH_DURATION_BOUND = 600.0;
float MOVE_BASE_THROUGH_DOOR_DURATION_BOUND = 6000.0;
float MOVE_BASE_DOOR_DURATION_BOUND = 1200.0;

/**
 * @brief We maintain an internal model of soor state. This is a time-dependent specification of a Door Msg. It will be
 * seeded from the topological map, but then modified as we perceive new data during execution.
 */
class DoorState extends AgentTimeline {

  /**
   * The only kind of value allowed is a DoorMsg. We define it here expliticly rather than use a prior struct definition. Ideally
   * NDDL will change to support structs and this will be unnecessary
   */
  predicate Holds{
    // Door state
    string frame_id;
    float time_stamp;

    /**
     * The following is essentially a Door message data structure. If we add support for 'struct'
     * in NDDL then we can declare structured data types that directly map to the relevant ROS message types.
     * This will be a generally useful feature of the language and will also make auto-generated NDDL/ROS
     * bindings straightforward. Absent that structure, we would have to capture structure through nomenclature.
     */

    // Overall latched state
    LatchState latch_state;

    // Points for the door frame
    float frame_p1_x;
    float frame_p1_y;
    float frame_p1_z;
    float frame_p2_x;
    float frame_p2_y;
    float frame_p2_z;

    // Additional Frame information
    float height;
    HINGE_FRAME hinge;
    ROTATION_DIRECTION rot_dir;

    // Points for the door
    float door_p1_x;
    float door_p1_y;
    float door_p1_z;
    float door_p2_x;
    float door_p2_y;
    float door_p2_z;

    // Handle data
    float handle_x;
    float handle_y;
    float handle_z;

    // Travel direction data
    float travel_dir_x;
    float travel_dir_y;
    float travel_dir_z;

    // Default Values
    defaultOnCommit(frame_id, "map");
    defaultOnCommit(latch_state, UNKNOWN);
    defaultOnCommit(frame_p1_x, 0.0);
    defaultOnCommit(frame_p1_y, 0.0);
    defaultOnCommit(frame_p1_z, 0.0);
    defaultOnCommit(frame_p2_x, 0.0);
    defaultOnCommit(frame_p2_y, 0.0);
    defaultOnCommit(frame_p2_z, 0.0);
    defaultOnCommit(door_p1_x, 0.0);
    defaultOnCommit(door_p1_y, 0.0);
    defaultOnCommit(door_p1_z, 0.0);
    defaultOnCommit(door_p2_x, 0.0);
    defaultOnCommit(door_p2_y, 0.0);
    defaultOnCommit(door_p2_z, 0.0);
    defaultOnCommit(height, 0.0);
    defaultOnCommit(hinge, UNKNOWN);
    defaultOnCommit(rot_dir, UNKNOWN);
    defaultOnCommit(handle_x, 0.0);
    defaultOnCommit(handle_y, 0.0);
    defaultOnCommit(handle_z, 0.0);
    defaultOnCommit(travel_dir_x, 0.0);
    defaultOnCommit(travel_dir_y, 0.0);
    defaultOnCommit(travel_dir_z, 0.0);
  }

  DoorState(){
    super(Internal, "Holds");
  }
};

/**
 * The state machine for high-level control in the door domain. The class declaration defines components of teh state machine, but not its transition
 * rules.
 */
class DoorController extends StateMachine {

  // Idle
  predicate Inactive{}

  // Checking the doorway to see if we can drive thru without having to contact the door
  predicate CheckingDoorway{}

  // For positioning the robot at the approach point to the door rom which it can detect the door
  predicate Positioning{}

  // For detecting the door.
  predicate DetectingDoor{}

  // For detectin the handle.
  predicate DetectingHandle{}

  // For moving towards the doo. Used prior to grasping, and/or opening the door
  predicate ApproachingDoor{}

  // Just to grab the handle. Relevant if the door is latched
  predicate GraspingHandle{}

  // Just to unlatch the handle. Relevant if the door is latched
  predicate UnlatchingHandle{}

  // To simply drive thru the doorway with no door contact. Requires a clear path
  predicate DriveThruDoorway{}

  // To actually physically open the door which requires base and arm motion. The base must drive
  // through while contact the door either with or wothout the handle
  predicate OpenDoor{
    bool use_handle;
  }

  DoorController(){ super(); }
};


MoveBehavior doorman = new MoveBehavior(Internal);
DoorController door_controller = new DoorController();
DoorState door_state = new DoorState();
AgentActions actions = new AgentActions();

// Initial conditions for internal timelines. The controller is inactive and we do not have the handle
fact(door_controller.Inactive dc_initial_state);
dc_initial_state.status = UNDEFINED;

// The doorman also becomes inactive when this transitions. These states should be co-temporal. This is an example of
// constraints across timelines
DoorController::Inactive{
  equals(doorman.Inactive dm);
  dm.status == status;
}

DoorController::CheckingDoorway{
  contained_by(doorman.Active dm);
  // Subgoal is the check_path command.
  contains(check_path.Active cmd);
  ends cmd;
  // Apply the local duration bound. This will force preemption
  cmd.max_duration <= CHECK_PATH_DURATION_BOUND;
  // Read the pose arguments from the goal pose of the doorman
  eq_pose_msg(cmd.object, dm.object);

  // We require that the cmd succeed. Failure will trigger a replan
  // To evaluate the enxt state, we consider the results of the command, which are in feedback paramaters.
  // If the doorway is clear we can drive on thru. Otherwise we have to figure out how to open the door. To do so,
  // we must be in position for detection
  cmd meets (check_path.Inactive cmd_feedback);
  if(isSucceded(cmd.object) && cmd_feedback.is_clear == true){
    meets(DriveThruDoorway);
  }
  else {
    meets(Positioning);
  }
}

DoorController::DriveThruDoorway{
  contained_by(doorman.Active dm);
  // Subgoal to drive straight thru the doorway
  contains(move_base.Active cmd);
  ends cmd;
  // Duration bounds
  cmd.max_duration <= MOVE_BASE_THROUGH_DOOR_DURATION_BOUND;
  // Command parameters based on doorman goal pose
  eq_pose_msg(cmd.object, dm.object);
  // If the command succeded we are done! If not, it is likely because the door is actually blocking us so we will want
  // to get back to detect the door and figure out how to get thru
  if(isSucceded(cmd.object)){
    meets(Inactive s);
    s.status == SUCCESS;
  }
  else{
    meets(Positioning);
  }
}

/**
 * We allow a preemption of the door controller on each attempt at positioning the robot. This is convenient
 * since it provide a natural exit point, where we would otherwise be initiating a retry
 */
DoorController::Positioning{
  contained_by(doorman.Active dm);
  if(isTimedOut(dm.object)){
    duration == 1;
    meets(Inactive s);
    s.status == PREEMPTED;
  }
  else {
    contains(move_base.Active cmd);
    ends cmd;
    cmd.frame_id == "map";
    map_get_door_approach_pose(cmd.x, cmd.y, cmd.z, cmd.qx, cmd.qy, cmd.qz, cmd.qw, dm.start_connector);

    // If navigation succeeds move on to door detection. Else iterate, offering a chance to time out eventually
    if(isSucceded(cmd.object)){
      meets(DetectingDoor);
    }
    else {
      meets(Positioning);
    }
  }
}

DoorController::DetectingDoor{
  // Detect door action
  contains(detect_door.Active cmd);
  ends cmd;
  // if we succed, then depending on the latch state we can go straight for the door
  // or we need to detect the handle first. if it fails, maybe the door has been opened! We might as well check the
  // doorway for a clear path again
  if(isSucceded(cmd.object) == true){
    cmd meets(detect_door.Inactive cmd_feedback);
    if(cmd_feedback.latch_state == LATCH_STATE_UNLATCHED){
      meets(ApproachingDoor);
    }
    else{
      meets(DetectingHandle);
    }
  }
  else {
    meets(CheckingDoorway);
  }
}

DoorController::DetectingHandle{
  contained_by(doorman.Active);
  // Detect the handle
  contains(detect_handle.Active cmd);
  ends cmd;
  // Duration bounds
  cmd.max_duration <= DETECT_HANDLE_DURATION_BOUND;

  // If we fail here, we can try get a new door pose. If we succeed we are ready to approach the door to open it
  if(isSucceded(cmd.object) == true){
    meets(ApproachingDoor);
  }
  else {
    meets(DetectingDoor);
  }
}

DoorController::ApproachingDoor{
  contained_by(doorman.Active dm);
  // Action that does all the work
  contains(move_base_local.Active cmd);
  ends cmd;
  cmd.max_duration <= MOVE_BASE_LOCAL_APPROACH_DURATION_BOUND;

  // target pose derived from the door state, and assuming a desired grasp range
  contained_by(door_state.Holds ds);
  cmd.frame_id == ds.frame_id;
  door_get_robot_pose_for_door(cmd.x, cmd.y, cmd.z, cmd.qx, cmd.qy, cmd.qz, cmd.qw, ds.object, GRASP_RANGE);

  // If we succed, then based on the latch state we will open the door or have to grasp the handle first. On failure we restart!
  if(isSucceded(cmd.object)){
    if(ds.latch_state == LATCH_STATE_LATCHED){
      meets(GraspingHandle);
    }
    else{
      meets(OpenDoor s);
      s.use_handle == false;
    }
  }
  else {
    meets(Positioning);
  }
}

DoorController::GraspingHandle{
  contained_by(doorman.Active);
  // Action with duration bounds
  contains(grasp_handle.Active cmd);
  ends cmd;
  cmd.max_duration <= GRASP_HANDLE_DURATION_BOUND;
  // If we have it, we can unlatch it. Otherwise we need to release the handle and go back to the start
  if(isSucceded(cmd.object)){
    meets(UnlatchingHandle);
  }
  else {
    meets(Positioning);
  }
}

DoorController::UnlatchingHandle{
  contained_by(doorman.Active);
  // Action with bounds
  contains(unlatch_handle.Active cmd);
  cmd.max_duration <= UNLATCH_HANDLE_DURATION_BOUND;
  // We could fail. In which case we want to restart. Otherwise handle case where the door is locked, vs unlatched.
  if(isSucceded(cmd.object)){
    cmd meets(unlatch_handle.Inactive cmd_feedback);
    // If locked, try again later
    if(cmd_feedback.latch_state == LATCH_STATE_LOCKED){
      // After the end time, release the handle
      ends cmd;
      meets(Inactive s);
      s.status == ABORTED;
    }
    else {
      cmd meets(OpenDoor s);
      s.use_handle == true;
    }
  }
  else {
    cmd meets(Positioning);
  }
}

DoorController::OpenDoor{
  contained_by(doorman.Active);
  // We will be moving the base thru the doorway. It must succeed, eventually, as we have no implemented recovery
  // for failure.
  contains(move_base_door.Active cmd_move_base_door);
  cmd_move_base_door.max_duration <= MOVE_BASE_DOOR_DURATION_BOUND;
  // Introduce a stop action that will preempt children
  cmd_move_base_door before(stop_action.Active cmd_stop_action);

  // Conditionally generate steps with or without the handle
  if(use_handle == true){
    // Open the door with a grasp on the handle.
    contains(open_door.Active cmd_open_door);
    // This must start before we begin moving the base
    cmd_open_door starts_before cmd_move_base_door;
    // Must stop the open door action explicitly
    cmd_stop_action.action_name == "open_door";
    // Ends when open_door finishes
    ends cmd_open_door;
  }
  else {
    // Need to touch the door and then push it. Both must succeed
    contains(touch_door.Active cmd_touch_door);
    cmd_touch_door before(push_door.Active cmd_push_door);
    cmd_push_door starts_before cmd_move_base_door;

    // Force touch door to succeed. Otherwise we retry
    isSucceded(cmd_touch_door.object) == true;

    // Must start pushing before we begin moving the base
    cmd_stop_action.action_name == "push_door";

    // Ends when push_door finishes
    concurrent(cmd_push_door.end, end);
  }

  if(isSucceded(cmd_move_base_door.object)){
    // Transition to completion
    meets(Inactive s);
    s.status == SUCCESS;
  }
  else{
    meets(OpenDoor s);
    s.use_handle == false;
  }
}

/************************************************************************
 * Now we define how actions update the door controller by setting
 * feedback parameters on success or failure
 ***********************************************************************/

/**
 * All door domain actions have the current door state as input.
 */
DoorAction::Active{
  starts_during(door_state.Holds ds);
  eq_door_msg(this.object, ds.object);
}

/**
 * @brief This commands update the door state if successful. Note that it is probable safe to assume this for all door actions
 * but they might screw up the feedback values! We could subclass the ones that do this to avoid redundancy.
 */
DoorActionWithFeedback::Inactive{
  if(status == SUCCESS){
    starts(door_state.Holds ds);
    eq_door_msg(ds.object, this.object);
  }
}
--begin /wg/stor5/jbohren/ros/ros-pkg-branch-trex/trex_pr2/nddl/doors/doorman.nddl
/**
 * Provides full functionality of the doorman. Here we integrate with the topological map.
 */
#include "world_model/topological_map.nddl"
#include "doors/door_controller.nddl"
#include "rcs/base_state.nddl"

// Use base state to obtain current pose for computing travel direction
BaseState base_state = new BaseState(External);

/**
 * Uses the door controller to accomplish this goal. Just initialize it and let it run
 */
MoveBehavior::Active {
  if(isStarted(this.object)){
    starts(door_controller.CheckingDoorway dc);

    // Initialize door message from the topological map
    MAP_KEY doorway_id;
    doorway_id != NO_KEY;

    // Only using the second point, since that point should be coming from the topological
    // map. The doorway is derived from a connector whose approach pose is closest to this
    map_get_doorway_from_points(doorway_id, x, y);
    starts(door_state.Holds ds);
    map_get_door_state(ds.object, doorway_id);
    ds.frame_id == frame_id;

    // Set travel direction based on deltas
    starts_during(base_state.Holds bs);
    bs.x + ds.travel_dir_x == x;
    bs.y + ds.travel_dir_y == y;
    ds.travel_dir_z == 0.0;

    // Set start connect by default if not set
    MAP_KEY connector_default;
    map_get_nearest_connector(connector_default, bs.x, bs.y, x, y);
    defaultOnCommit(start_connector, connector_default);
  }
}
--begin /wg/stor5/jbohren/ros/ros-pkg-branch-trex/trex_pr2/nddl/doors/imports.nddl
#include "rcs/doors/exports.nddl"
#include "common/move_behavior.nddl"
#include "common/nav.nddl"

/**
 * @brief Obtain the base pose at a given distance normal to the door frame. The token object has all the parameters
 * of a door message.
 */
constraint  door_get_robot_pose_for_door(x, y, z, qx, qy, qz, qw, token_object, distance){
  x <: numeric && y <: x && z <: x && 
  qx <: x && qy <: x && qz <: x && qw <: x &&
  token_object <: Object && distance <: x
}

// Control constants for distances from door for detection, grasping and moving through the doorway
float DETECTION_RANGE = -1.0;
float GRASP_RANGE = -0.6;
float DOORWAY_CLEARANCE_RANGE = 0.4;

// Additional actions for the doro domain
StopAction stop_action = new StopAction(External);
OpenDoor open_door = new OpenDoor(External);
GraspHandle grasp_handle = new GraspHandle(External);
TouchDoor touch_door = new TouchDoor(External);
PushDoor push_door = new PushDoor(External);
CheckPath check_path = new CheckPath(External);
MoveBase move_base = new MoveBase(External);
MoveBase move_base_local = new MoveBase(External);
MoveBaseDoor move_base_door = new MoveBaseDoor(External);
UnlatchHandle unlatch_handle = new UnlatchHandle(External);
DetectHandle detect_handle = new DetectHandle(External);
DetectDoor detect_door = new DetectDoor(External);

DetectDoor::Active{
  contained_by(laser_tilt_mechanism.use_laser_tilt_controller);
  contained_by(right_arm_mechanism.use_joint_trajectory_controller);
  contained_by(arms_tucked.True);
}

DetectHandle::Active{
  contained_by(laser_tilt_mechanism.use_laser_tilt_controller);
  contained_by(head_mechanism.use_head_controller);
  contained_by(right_arm_mechanism.use_joint_trajectory_controller);
  contained_by(arms_tucked.True);
}

GraspHandle::Active{
  contained_by(right_arm_mechanism.use_constraint_composite_cartesian_trajectory_controller);
  contained_by(right_gripper_mechanism.use_effort_controller);
}

UnlatchHandle::Active{
  contained_by(right_arm_mechanism.use_composite_tff_controller);
  contained_by(right_gripper_mechanism.use_effort_controller);
}

OpenDoor::Active{
  contained_by(right_arm_mechanism.use_composite_tff_controller);
  contained_by(right_gripper_mechanism.use_effort_controller);
}

TouchDoor::Active{
  contained_by(right_arm_mechanism.use_constraint_composite_cartesian_trajectory_controller);
  contained_by(right_gripper_mechanism.use_effort_controller);
}

PushDoor::Active{
  contained_by(right_arm_mechanism.use_constraint_composite_cartesian_pose_controller);
  contained_by(right_gripper_mechanism.use_effort_controller);
}

// Controller requirements
MoveBaseDoor::Active{
  contained_by(head_mechanism.use_head_controller);
  contained_by(laser_tilt_mechanism.use_laser_tilt_controller);
}


--begin /wg/stor5/jbohren/ros/ros-pkg-branch-trex/trex_pr2/nddl/state_estimator/exports.nddl
#include "mechanism_control/exports.nddl"
#include "rcs/nav/exports.nddl"
#include "rcs/plugs/exports.nddl"
#include "rcs/doors/exports.nddl"
#include "rcs/state_estimator/exports.nddl"

float SAFETY_TUCK_ARMS_DURATION_BOUND = 600.0;
float RELEASE_HANDLE_DURATION_BOUND = 300.0;

// Safety State Variables Timelines
ArmsTucked arms_tucked = new ArmsTucked(External);
TiltLaserReady tilt_laser_ready = new TiltLaserReady(External);
GripperFree gripper_free = new GripperFree(External);

// Mechamisms of interest
TiltLaserMechanism laser_tilt_mechanism = new TiltLaserMechanism(External);
RightArmMechanism right_arm_mechanism = new RightArmMechanism(External);
RightGripperMechanism right_gripper_mechanism = new RightGripperMechanism(External);

// Action timeline to plan for
SafetyTuckArms safety_tuck_arms = new SafetyTuckArms(External);

// Action causing tilt laser to be set
SetLaserTilt set_laser_tilt = new SetLaserTilt(External);

// Action causing gripper to free
ReleaseHandle release_handle = new ReleaseHandle(External);

ArmsTucked::True{
  met_by(safety_tuck_arms.Active p);
  isSucceded(p.object) == true;
  p.max_duration <= SAFETY_TUCK_ARMS_DURATION_BOUND;
}

TiltLaserReady::True{
  met_by(set_laser_tilt.Active p);
  isSucceded(p.object) == true;
}

GripperFree::True{
  met_by(release_handle.Active p);
  isSucceded(p.object) == true;
  p.max_duration <= RELEASE_HANDLE_DURATION_BOUND;
}

SafetyTuckArms::Active{
  contained_by(right_arm_mechanism.use_joint_trajectory_controller);
  contained_by(right_gripper_mechanism.use_effort_controller);
  contained_by(gripper_free.True);
}

SetLaserTilt::Active{
  contained_by(laser_tilt_mechanism.use_laser_tilt_controller);
}

ReleaseHandle::Active{
  contained_by(right_arm_mechanism.use_constraint_composite_cartesian_trajectory_controller);
  contained_by(right_gripper_mechanism.use_effort_controller);
}
--begin /wg/stor5/jbohren/ros/ros-pkg-branch-trex/trex_ros/nddl/ros.nddl
#include "TREX.nddl"

/**
 * An error bound for time when preempting or when terminating.
 */
typedef int [-1, 1] TIME_ERROR_BOUND;

/**
 * Defines core interfaces for ROS integration
 */

/**
 * Specialize to mark all ROS State Variables. Note that it can be internal or external, since we may choose
 * to simulate it with NDDL.
 */
class ROSStateVariable extends AgentTimeline {

  predicate Holds{}

  ROSStateVariable(Mode _mode){ super(_mode, "Holds"); }
  ROSStateVariable(Mode _mode, string _default_value, bool _persistent){ super(_mode, _default_value, _persistent); }

  ROSStateVariable(Mode _mode, string _pred){
    super(_mode, _pred);
  }

  ROSStateVariable(Mode _mode, string _pred, bool _opt){
    super(_mode, _pred, _opt);
  }
};

/**
 * A StateMachine control structure
 */
class StateMachine extends AgentTimeline {

  // The controller is in an inactive state. Basically idle.
  predicate Inactive{
    ResultStatus status;
    // Be default will be UNDEFINED
    defaultOnCommit(status, UNDEFINED);
    // Should always be integrated in the mission profile
    temporalDistance(start, [1, +inf], MISSION_END);
  }
  
  StateMachine(){ super(Internal, "Inactive"); }
  StateMachine(Mode _mode, string _default_value, bool _persistent){ super(Internal, "Inactive", _persistent); }
};

/**
 * Specialize to mark all ROS Actions. A max_duration parameter is used
 * to allow actions to be preempted in the ros adapter.
 */
class ROSAction extends Behavior {

  ROSAction(Mode _mode){
    super(_mode);
  }
};

ROSAction::Active{
  int time_since_dispatch;
  dispatch_time + time_since_dispatch == start;
  time_since_dispatch <= 100; // Magic number to break the plan if 100 ticks passes between dispatch and starting
}

/**
 * Reusable class for boolean state variables
 */
class BooleanTimeline extends AgentTimeline {
  predicate True{}
  predicate False{};

  /**
   * Persistent by default
   */
  BooleanTimeline(Mode _mode, string _default_value){
    super(_mode, _default_value, true);
  }
  BooleanTimeline(Mode _mode, string _default_value, bool _persistent){
    super(_mode, _default_value, _persistent);
  }
};

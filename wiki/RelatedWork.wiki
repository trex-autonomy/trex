= T-REX in the Scheme of Things =
This page offers a little bit of history in the development of robot control architectures and how T-REX fits into that work. The block diagrams below depict common  architectural patterns for autonomous robots. In all cases, there has been a de-facto agreement on the use of modular task specific components variously called behaviors, actions, commands or skills. The approaches differ primarily in how such primitives are composed to achieve more sophisticated tasks.

||[http://trex-autonomy.googlecode.com/svn/wiki/images/related_work.1.png]||[http://trex-autonomy.googlecode.com/svn/wiki/images/related_work.2.png]||[http://trex-autonomy.googlecode.com/svn/wiki/images/related_work.3.png]||[http://trex-autonomy.googlecode.com/svn/wiki/images/related_work.4.png]||
|| Ad-hoc Methods / Reactive Execution || Three Layer Architectures || Model-based Executives || T-REX ||

== Ad-Hoc Methods / Reactive Execution ==
One approach to composing behavior primitives is to use some form of procedure, script or plan which can be executed reactively. It is not uncommon to use mainstream programming languages such as Python, or C++ to do this. There have also been a number of works which aim to simplify the programming task with a more specialized language suitable for robot execution. Examples include PRS (Georgeff89), PRS-Lite (Meyers86), Colbert (Konolige97), RAP (Firby87), TDL (Simmons98), Teleo-Reactive Programs (Nillson94). The burden is on the robot programmer to come up with details on how desired behaviors are to be accomplished. This becomes increasingly difficult as robots and their applications become more complex. In particular, these approaches did not provide a way to integrate deliberation over alternatives or a consideration of downstream effects as part of the control architecture, which limits the adaptability of robot behavior.
== Three Layer Architectures ==
In order to reduce the burden to programmers, and to increase the adaptability of robots, the purely procedural, reactive programming model was augmented with a deliberative planning component that could generate plans for execution based on conditions in-situ. Users specify goals and domain models for the planner, which generates plans and dispatches them for execution to the executive. The plan can be monitored, incrementally refined, and repaired as necessary. The executive includes procedural specifications for how plan elements are decomposed into lower-level commands. Examples of _three-layer architectures_ abound: 3T (Bonasso97), The Remote Agent (Muscettola98), The LAAS Architecture (Alami98), Saphira (Konolige96). One  limitation of 3-tier architectures is that they confine the role of formal, deliberative techniques to only the highest levels of abstraction and render subsequent robot behavior subject to informal, reactive approaches that do not consider problematic implications of local decisions. Furthermore, the separation of deliberative and reactive behaviors into separate layers with separate technologies and separate specifications compounds the complexity of integration, requiring disparate programming models and run-time technologies.
== Model-based Executives ==
More recently, a number of researchers have developed executives that emphasize model-based approaches and deep integration of automated planning. Structured Reactive Controllers (Beetz00) use a transformational planner to modify prior plans in situ. Kirk (Kim01) and Titan (Williams03) are designed to combine temporal planning with reactive execution through a unified modeling language called RMPL. IDEA (Muscettola02) is notable for the richness of the underlying timeline-based semantics which are founded on constraint-based temporal planning (CTP) (Frank03), and the extent to which it exploits automated planning and plan-based reasoning techniques at the core of execution. CTP has been applied in a number of practical applications (e.g. Muscettola98, Bresina05). IDEA was implemented on top of the open-source [http://code.google.com/p/europa-pso/wiki/EuropaWiki EUROPA planning framework] , and was fielded in a number of technology demonstrations (Aschwanden06). Model-based execution is something of a return to the Sense-Plan-Act paradigm embodied in the Shakey Robot (Nilsson84), aided by improvements in computing power, and planning techniques.
== T-REX ==
Model-based executives provide a tighter integration between planning and execution through shared models and common infrastructure for plan generation and plan execution. TREX (McGann08a, McGann08b) was developed initially for deployment on Autonomous Underwater Vehicles based on the same foundations as IDEA (i.e. the CTP paradigm and a deep integration of planning techniques in execution). TREX is distinct from IDEA in a number of ways. Most notably, it identifies scalability as a key issue and uses a formal framework for partitioning an agent structure into a collection of co-ordinated control loops to allow planning based approaches to scale to more complex applications efficiently. Secondarily, it utilizes a more direct mapping to the underlying EUROPA planning system which exposes greater functionality with less integration complexity. This is primarily a practical concern.

= References =
 * Alami98: R. Alami, R. Chatila, S. Fleury, M. Ghallab, F. Ingrand. International Journal of Robotics Research (Special Issue on ``Integrated Architectures for Robot Control and Programming'', Vol 17, N° 4, Apri1 1998).
 * Aschwanden06: Pascal Aschwanden, Vijay Baskaran, Sara Bernardini, Chuck Fry, Maria Moreno, Nicola Muscettola, Chris Plaunt, David Rijsman, Paul Tompkins}: Model-Unified Planning and Execution for Distributed Autonomous System Control, Workshop on Spacecraft Autonomy, AAAI Fall Symposium, 2006.
 * Beetz00: Michael Beetz.  Runtime Plan Adaptation in Structured Reactive Controllers. ICAA, 2000
 * Bonasso97: R. Peter Bonasso, R. James Firby, Erann Gat, David Kortenkamp, David P. Miller, Marc G. Slack: Experiences with an architecture for intelligent, reactive agents. J. Exp. Theor. Artif. Intell. 9(2-3): 237-256 (1997)
 * Bresina05: John L. Bresina, Ari K. Jonsson, Paul H. Morris, Kanna Rajan. Activity Planning for the Mars Exploration Rovers. ICAPS, 2005.
 * Dechetr91: Rina Dechter, Itay Meiri, Judea Pearl: Temporal Constraint Networks. Artif. Intell. 49(1-3): 61-95 (1991)
 * Firby87: R. James Firby.  An Investigation into Reactive Planning in Complex Domains. AAAI 1987: 202-206 
 * Frank03: J. Frank and A. K. Jonsson: Constraint-based Attribute and Interval Planning. Constraints 8(4): 339-364
 * Georgeff89:  M. P.  Georgeff and A. L. Lansky,  (1987). Reactive reasoning and planning. In Proceedings of the Sixth National Conference on Artificial Intelligence (AAAI-87), pages 677-682, Seattle, WA. 
 * Kim01: P. Kim, B. C. Williams, and Mark Abramson. Executing Reactive, Model-based Programs through Graph-based Temporal Planning. IJCAI 2001.
 * Konolige97: K. Konolige. Colbert: A language for reactive control in sapphira. In G. Brewka, C. Habel, and B. Nebel, editors, Advances in Artificial Intelligence, volume 1303 of Lecture Notes in Computer Science. Springer, 1997
 * McGann08a: C. McGann, F. Py, K. Rajan, H. Thomas, R. Henthorn, R. McEwen. A deliberative architecture for AUV control. ICRA, 2008, 1049-1054.
 * McGann08b: C. McGann, F. Py, K. Rajan, J. Ryan, R. Henthron. Adaptive Control for Autonomous Underwater Vehicles. AAAI, 2008, 1319-1324.
 * Meyers96: K. L. Myers. A Procedural Knowledge Approach to Task-Level Control, in Proceedings of the Third International Conference on AI Planning Systems, 1996. 
 * Muscettola98: Nicola Muscettola, P. Pandurang Nayak, Barney Pell, Brian C. Williams. Remote Agent: To Boldly Go Where No AI System Has Gone Before. AI 103{1-2):5-47
 * Muscettola02: Nicola Muscettola and Gregory A. Dorais and Chuck Fry and Richard Levinson and Christian Plaunt. IDEA: Planning at the Core of Autonomous Reactive Agents. 3rd International NASA Workshop on Planning and Scheduling for Space. 2002.
 * Nilsson84: Nils J. Nilsson, ed. Shakey the Robot. SRI Technical Note no 323 (1984), SRI, Menlo Park, California.
 * Nilsson94: Nils J. Nilsson. Teleo-Reactive Programs for Agent Control. J. Artif. Intell. Res. (JAIR),1:139-158
 * Simmons98: Reid Simmons ,  David Apfelbaum: A Task Description Language for Robot Control. IROS, 1998
 * Williams03: Brian C. Williams and Michel D. Ingham and Seung H. Chung and Paul H. Elliott. Model-Based Programming of Intelligent Embedded Systems and Robotic Space Explorers. IEEE: Special Issue on Modeling and Design of Embedded Software (212-237), 2003.